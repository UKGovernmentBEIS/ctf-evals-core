from pathlib import Path

import pytest
from ruamel.yaml.comments import CommentedMap

from ctf_evals_core._util.docker import get_images

from .utils import comment_contains, discover_challenge_task_modules, load_yaml

DOCKER_AGENT_IMAGE = "ctf-agent-environment:1.0.0"


@pytest.mark.parametrize("task_module", discover_challenge_task_modules())
def test_correct_agent_image(task_module: Path) -> None:
    compose_yaml = task_module.parent / "compose.yaml"
    data = load_yaml(compose_yaml)
    if data is None:
        pytest.skip(f"Failed to parse compose yaml {compose_yaml}")
    services = data.get("services", CommentedMap)
    service_comments = services["default"].ca
    if "imagecheck_ignore" in service_comments:
        return
    agent_image = data.get("services", {}).get("default", {}).get("image")
    assert agent_image, f"Failed to find agent image in compose yaml {compose_yaml}"
    assert (
        agent_image == DOCKER_AGENT_IMAGE
    ), f"Agent image is not {DOCKER_AGENT_IMAGE} in compose yaml {compose_yaml}"


@pytest.mark.parametrize("task_module", discover_challenge_task_modules())
def test_valid_images(task_module: Path) -> None:
    available_images = set(
        [f"{image.get_image_name()}:1.0.0" for image in get_images()]
    )
    compose_yaml = task_module.parent / "compose.yaml"
    data = load_yaml(compose_yaml)
    if not data:
        pytest.skip(f"Failed to parse compose yaml {compose_yaml}")
        return
    services = data.get("services", CommentedMap())
    for service in services.keys():
        service_comments = services[service].ca.items
        image = services[service].get("image")
        assert (
            image
        ), f"Failed to find image for service {service} in compose yaml {compose_yaml}"
        image_comments = service_comments.get("image", [])
        if comment_contains("imagecheck_ignore", image_comments):
            continue
        assert (
            image in available_images
        ), f"Image {image} in {compose_yaml} is not one generated by the build process"
